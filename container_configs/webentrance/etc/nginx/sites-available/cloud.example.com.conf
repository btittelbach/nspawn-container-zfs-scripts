server {
        listen 80;
        listen [::]:80;
        server_name cloud.example.com;

    	root /var/www/html/;

        location /.well-known/acme-challenge/ {
                alias /var/www/.well-known/acme-challenge/;
                autoindex       off;
                try_files $uri $uri/ =404;
        }


        location / {
                return 301 https://$server_name$request_uri;
        }
}


server {
    # Listening port and host address
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name cloud.example.com;
   
    ## HSTS
    add_header Strict-Transport-Security "max-age=15552000; includeSubDomains";
    
    # don't render my page if XSS detected
    add_header X-XSS-Protection "1; mode=block";

    # No MIME sniffing (use snippet for this)
    add_header X-Content-Type-Options "nosniff";
    
    # no iframe embedding
    add_header X-Frame-Options "SAMEORIGIN";
    
    ssl_protocols TLSv1.1 TLSv1.2;
    ## recommended by MacLemon
    #ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;
    ## ssl ciphers supposedly needed to get cloud client on Android 4 (Tolino) to run
    #ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-AES256-GCM-SHA384:DHE-RSA-AES128-GCM-SHA256:DHE-DSS-AES128-GCM-SHA256:kEDH+AESGCM:ECDHE-RSA-AES128-SHA256:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA:ECDHE-ECDSA-AES128-SHA:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA:ECDHE-ECDSA-AES256-SHA:DHE-RSA-AES128-SHA256:DHE-RSA-AES128-SHA:DHE-DSS-AES128-SHA256:DHE-RSA-AES256-SHA256:DHE-DSS-AES256-SHA:DHE-RSA-AES256-SHA:!aNULL:!eNULL:!EXPORT:!DES:!RC4:!3DES:!MD5:!PSK;
    ## ssl_ciphers recommended by MacLemon extended to get cloud client running on Android 4 (Tolino)
    ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256:DHE-RSA-AES256-SHA256:ECDHE-ECDSA-AES128-SHA:ECDHE-ECDSA-AES256-SHA:ECDHE-RSA-AES256-SHA;
    ssl_prefer_server_ciphers on;

    ## CSP:
    ## no need to set, since cloud already correctly sets the CSP in response.php

    # OCSP Stapling  (TODO) 
	  
    # SSL Certificates
    ssl_certificate /etc/ssl/nginx/letsencrypt-cloud.example.com.fullchain.pem;
    ssl_certificate_key /etc/ssl/nginx/letsencrypt-cloud.example.com.key;

    # Default index pages
    index app.php index.html

    # Default character set
    charset utf-8;

    # Turn off access.log writes
    access_log off;
    log_not_found off;

    # Send file is an optimization, but does not work
    # across unix sockets which I use for php fpm so is best
    # used for local static content only
    sendfile off;

    # Root for / project
    root /var/www/html/;
        
	location /.well-known/acme-challenge/ {
                alias /var/www/.well-known/acme-challenge/;
                autoindex       off;
                try_files $uri $uri/ =404;
        }

	error_page 502 /500_bad_gateway.html;
	error_page 504 /500_bad_gateway.html;
	location /500_bad_gateway.html { }

	location / {
		proxy_bind <TODO>;
		proxy_pass http://<TODO>:80;
		proxy_set_header Host $host;
		proxy_set_header X-Real-IP $remote_addr;
		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
		proxy_set_header X-Forwarded-Proto $scheme;
		proxy_connect_timeout       600;
		proxy_send_timeout          600;
		proxy_read_timeout          600;
		send_timeout                600;
		client_max_body_size      4096M;
        }

}

